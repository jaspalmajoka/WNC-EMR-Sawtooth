swagger: '2.0'
info:
  description: Open EMR Blockchain API Endpoint to store and retreive data from State
  version: 1.0.0
  title: Open EMR Blockchain API
  # put the contact info for your development or API team
  contact:
    email: johnjayasingh.s@gmail.com

# tags are used for organizing operations
tags:
- name: User
  description: User related api
- name: Appointment
  description: Appointment related api
- name: Patient
  description: Patient related api
- name: Document
  description: Document related api
- name: Hospital
  description: Hospital related api
paths:
  /appointment:
    # get:
    #   tags: 
    #   - Patient
    #   summary: Patient from  state
    #   description: patient entry from state
    #   parameters:
    #   - name: "id"
    #     in: "query"
    #     description: "Patient ID should be passed"
    #     type: "string"
    #   responses:
    #     200:
    #       description: Patient Details Retreived
    #     400:
    #       description: invalid input, query params invalid
    post:
      tags:
      - Appointment
      summary: Create Appointment, Provider, Patient to state
      description: Add Appointment entry to state
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: patientItem
        description: Patient item to add
        schema:
          $ref: '#/definitions/CreatePatient'
      responses:
        201:
          description: Patient ID created
        400:
          description: invalid input, object invalid
  /patient:
    get:
      tags: 
      - Patient
      summary: Patient from  state
      description: patient entry from state
      parameters:
      - name: "id"
        in: "query"
        description: "Patient ID should be passed"
        type: "string"
      responses:
        200:
          description: Patient Details Retreived
        400:
          description: invalid input, query params invalid
    post:
      tags:
      - Patient
      summary: Create Patient to state
      description: Add patient entry to state
      consumes:
      - application/json
      produces:
      - application/json
      parameters:
      - in: body
        name: patientItem
        description: Patient item to add
        schema:
          $ref: '#/definitions/CreatePatient'
      responses:
        201:
          description: Patient ID created
        400:
          description: invalid input, object invalid
  /document/{id}:
    delete:
      tags:
      - Document
      summary: Delete Document from state
      description: Delete Document entry from blockchain state
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: "ID of that Document that need to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: Documetn created and attached to patient
        400:
          description: invalid input, object invalid
  /document:
    post:
      tags:
      - Document
      summary: Adds document 
      description: Adds document record
      produces:
      - application/json
      parameters:
      - in: body
        name: patientData
        description: Patient Data to be updated
        schema:
          $ref: '#/definitions/CreateDocument'
      responses:
        201:
          description: Patient ID created
        400:
          description: invalid input, object invalid
    get:
      tags:
      - Document
      summary: Get Document from state
      description: Get Document entry from blockchain state
      produces:
      - application/json
      parameters:
      - name: id
        in: query
        description: "ID of that Document that need to be retreived from state"
        required: false
        type: "string"
      responses:
        201:
          description: Document retreived 
        400:
          description: invalid input, object invalid
  /user:
    get:
      tags: 
      - User
      summary: Get Users from state
      description: User entry from state
      parameters:
      - name: "id"
        in: "query"
        description: "User ID should be passed"
        type: "string"
      responses:
        200:
          description: User Details Retreived
        400:
          description: invalid input, query params invalid
  /user/register/{userType}:
    post:
      tags:
      - User
      summary: Register user  
      description: Register user record
      produces:
      - application/json
      parameters:
      - name: userType
        in: path
        description: "User type"
        required: true
        type: "string"
      - in: body
        required: true
        name: userData
        description: User Data to be stored
        schema:
          $ref: '#/definitions/CreateUser'
      responses:
        201:
          description: User Info created
        400:
          description: invalid input, object invalid
  /user/login/{id}:
    post:
      tags:
      - User
      summary: Traces login transaction for user id
      description:  Traces login transaction for user id
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: "ID of that User that needs to be traced as login"
        required: true
        type: "string"
      responses:
        201:
          description: Hospital ID created
        400:
          description: invalid input, object invalid
  /user/{id}:
    put:
      tags:
      - User
      summary: Updates user data 
      description: Updates user record
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: "ID of that User that needs to be updated"
        required: true
        type: "string"
      - in: body
        required: true
        name: userData
        description: User Data to be stored
        schema:
          $ref: '#/definitions/UpdateUser'
      responses:
        201:
          description: User Data updated
        400:
          description: invalid input, object invalid
  /hospital:
    post:
      tags:
      - Hospital
      summary: Adds hospital 
      description: Adds hospital record
      produces:
      - application/json
      parameters:
      - in: body
        name: hospitalData
        description: Hospital Data to be updated
        schema:
          $ref: '#/definitions/CreateHospital'
      responses:
        201:
          description: Hospital ID created
        400:
          description: invalid input, object invalid
    get:
      tags:
      - Hospital
      summary: Get Hospital data from state
      description: Get Hospital entry from blockchain state
      produces:
      - application/json
      parameters:
      - name: id
        in: query
        description: "ID of that Hospital that need to be retreived from state"
        required: false
        type: "string"
      responses:
        201:
          description: Hospital data retreived 
        400:
          description: invalid input, object invalid
  /hospital/{id}:
    delete:
      tags:
      - Hospital
      summary: Delete Hospital from state
      description: Delete Hospital entry from blockchain state
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: "ID of that Hospital that need to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: Hospital deleted
        400:
          description: invalid input, object invalid
  /patient/{id}:
    delete:
      tags:
      - Patient
      summary: Delete Patient from state
      description: Delete Patient entry from blockchain state
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: "ID of that patient that need to be deleted"
        required: true
        type: "string"
      responses:
        200:
          description: Patient ID created
        400:
          description: invalid input, object invalid
    put:
      tags:
      - Patient
      summary: Pass in the complete updated data to Update the patient record
      description: Pass in the complete updated data to Update the patient record
      produces:
      - application/json
      parameters:
      - name: id
        in: path
        description: "ID of that patient that need to be updated"
        required: true
        type: "string"
      - in: body
        name: patientData
        description: Patient Data to be updated
        schema:
          $ref: '#/definitions/UpdatePatient'
      responses:
        201:
          description: Patient ID created
        400:
          description: invalid input, object invalid
definitions:
  CreateDocument:
    type: object
    properties:
      patientId:
        type: string
        example: P1
      data:
        type: object
        example: { "data": "patient document", "location": "http://download.pdf" }
  CreateUser:
    type: object
    properties:
      id:
        type: string
        example: P1
      data:
        type: object
        example: { "name": "John Doe", "phone":"121231232" }
  UpdateUser:
    type: object
    properties:
      changes:
        type: array
        items: 
          type: object
          properties:
            field:
              type: string
              example: P1
            value:
              type: string
              example: P1
  CreatePatient:
    type: object
    properties:
      id:
        type: string
        example: P1
      data:
        type: object
        properties:
          name:
            type: string
            example: John Doe
          phone:
            type: string
            example: 121231232
  CreateAppointment:
    type: object
    properties:
      # id:
      #   type: string
      #   example: APP1
      provider:
        type: object
        properties:
          id:
            type: string
            example: P1
          name:
            type: string
            example: John Doe
      patient:
        type: object
        properties:
          id:
            type: string
            example: P1
          name:
            type: string
            example: Robin Williams
      appointment:
        type: object
        properties:
          id:
            type: string
            example: APP1
          location:
            type: string
            example: Mumbai
          phone:
            type: string
            example: 121231232
  UpdatePatient:
    type: object
    properties:
      data:
        type: object
        properties:
          name:
            type: string
            example: John Doe
          phone:
            type: string
            example: 121231232
  CreateHospital:
    type: object
    properties:
      id:
        type: string
        example: H1
      data:
        type: object
        example: { "info": "hospital" }
# Added by API Auto Mocking Plugin
host: 18.136.137.49:3000
basePath: /api
schemes:
 - http